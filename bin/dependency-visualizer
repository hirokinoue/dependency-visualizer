#!/usr/bin/env php
<?php declare(strict_types=1);

namespace Hirokinoue\DependencyVisualizer;

use Composer\XdebugHandler\XdebugHandler;
use Hirokinoue\DependencyVisualizer\Config\Config;
use Hirokinoue\DependencyVisualizer\Exporter\Exporter;
use Hirokinoue\DependencyVisualizer\Exporter\PlantUmlExporter;
use Hirokinoue\DependencyVisualizer\Exporter\StringExporter;

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $autoload) {
    if (file_exists($autoload)) {
        $loadedFile = $autoload;
        require $autoload;
        break;
    }
}

list($options, $file) = parseArgs($argv);

if ($options['help']) {
    echo 'Usage: dependency-visualizer [options] <target php file>' . PHP_EOL;
    echo 'Options:' . PHP_EOL;
    echo '  -d: Load Xdebug.' . PHP_EOL;
    echo '  -h: Show this help.' . PHP_EOL;
    echo '  -l: Output log to current directory.' . PHP_EOL;
    echo '  -m: Draw methods in diagram.' . PHP_EOL;
    echo '  -s: Output analysis results in string format.' . PHP_EOL;
    exit(0);
}

if ($options['loadXdebug'] === false) {
    $xdebug = new XdebugHandler('dependency-visualizer');
    $xdebug->check();
    unset($xdebug);
}
Config::initialize(\getcwd());

ini_set('memory_limit', Config::memoryLimit());

Logger::initialize($options['log']);

Logger::info('autoload file has been loaded', ['path' => $loadedFile ?? '']);
Logger::info('start analyzing', ['target' => $file]);
Logger::info('Xdebug is ' . (extension_loaded('xdebug') ? 'enabled.' : 'disabled.'));

try {
    $dependencyVisualizer = DependencyVisualizer::create($file);
    $diagramUnit = $dependencyVisualizer->analyze();
} catch (\Exception $e) {
    Logger::error($e->getMessage());
    Logger::error('finish analyzing abnormally');
    exit(1);
}

Logger::info('start drawing');

$exporter = exporterFactory($options);
echo $exporter->export($diagramUnit);

Logger::info('finish analyzing');
exit(0);

function exporterFactory($options): Exporter {
    if ($options['exporter'] === 'plantuml') {
        return new PlantUmlExporter($options['drawMethod']);
    }
    return new StringExporter();
}

function parseArgs($args): array {
    $options = [
        'loadXdebug' => false,
        'help' => false,
        'log' => false,
        'drawMethod' => false,
        'exporter' => 'plantuml',
    ];
    $file = '';
    foreach ($args as $arg) {
        switch ($arg) {
            case '-d':
                $options['loadXdebug'] = true;
                break;
            case '-h':
                $options['help'] = true;
                break;
            case '-l':
                $options['log'] = true;
                break;
            case '-m':
                $options['drawMethod'] = true;
                break;
            case '-s':
                $options['exporter'] = 'string';
                break;
            default:
                $file = $arg;
        }
    }
    return [$options, $file];
}
